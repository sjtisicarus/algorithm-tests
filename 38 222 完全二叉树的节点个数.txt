想的方法是，左边走到底得到最左的深度，右边走到底得到最右的深度，两个深度一样，则满，直接算结果，不一样的情况，我想的是找按照满二叉树的情况看最中间的两个子节点的深度，也就是左走一格，一直往右，和右走一格，一直往左，的叶子节点的深度，如果中左深度=左深度，中右深度=右深度，则加上2^k-1这么多，如果中左中右相等，等于左，则再从当前判断的根往右走一格，对这个树的中左中右判定。
看了下题解，我想复杂了，不需要去求中左中右，直接用递归，是满二叉树的情况就不再继续，不是满二叉树的情况就对左右子树分别重复这个过程。有些题还是得用递归才方便啊。
我一直想的是，先用右边的深度把最后未满的一行之外的个数计算出来，然后找到最后一行的节点个数，就发现很麻烦找，就想来想去越想越复杂，不如题解直接将树拆分两个子树来看是否为满二叉树，这样的方式就是大的满二叉加小的满二叉加更小的满二叉这样来算的，实际上会快。得到一个子树的深度的操作是logn的，而最多进行logn次找深度的操作，复杂度是(logn)^2的，比On要小

题解代码
class Solution {
public:
    int countNodes(TreeNode* root) {
        if (root == nullptr) return 0;
        TreeNode* left = root->left;
        TreeNode* right = root->right;
        int leftDepth = 0, rightDepth = 0; // 这里初始为0是有目的的，为了下面求指数方便
        while (left) {  // 求左子树深度
            left = left->left;
            leftDepth++;
        }
        while (right) { // 求右子树深度
            right = right->right;
            rightDepth++;
        }
        if (leftDepth == rightDepth) {
            return (2 << leftDepth) - 1; // 注意(2<<1) 相当于2^2，所以leftDepth初始为0
        }
        return countNodes(root->left) + countNodes(root->right) + 1;
    }
};