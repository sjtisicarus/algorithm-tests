如果使用for循环遍历，则不能用data.size()直接代替nCount,因为data.pop()会改变data.size()
主要在于练习对STD的stack的使用

class MyQueue {
public:
    std::stack<int,std::vector<int>> st1;
    std::stack<int,std::vector<int>> st2;
    MyQueue() {
        
    }

    void push(int x) {
//cout << "push " << x << endl;
        st1.push(x);
    }
    
    int pop() {
        int tmp = 0;
        if(st2.empty()) {
// cout << "pop while st2 empty." << endl;
// cout << "st1.size == " << st1.size() << endl;
// cout << "st1 == " << endl;
            while(!st1.empty()) {
// cout << st1.top() << " ";
                st2.push(st1.top());
                st1.pop();
            }
// cout << endl;
// cout << "pop out " << st2.top() << endl;
            tmp = st2.top();
            st2.pop();
            return tmp;
        }
        else {
// cout << "pop out " << st2.top() << endl;
            tmp = st2.top();
            st2.pop();
            return tmp;
        }
    }
    
    int peek() {
        if(st2.empty()) {
// cout << "peek while st2 empty." << endl;
// cout << "st1.size == " << st1.size() << endl;
// cout << "st1 == ";
//如果使用for循环遍历，则不能用data.size()直接代替nCount,因为data.pop()会改变data.size()
            while(!st1.empty()) {
// cout << st1.top() << " ";
                st2.push(st1.top());
                st1.pop();
            }
// cout << endl;
// cout << "peek " << st2.top() << endl;
            return st2.top();
        }
        else {
// cout << "peek " << st2.top() << endl;
            return st2.top();
        }
    }
    
    bool empty() {
// cout << "empty it " << (st1.empty() || st2.empty()) << endl;
        return (st1.empty() && st2.empty());
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */