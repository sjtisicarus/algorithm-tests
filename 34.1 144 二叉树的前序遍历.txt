递归
注意node是指针，所以用->，


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void early_traversal(TreeNode* rootnode, vector<int> &ans) {
        if(rootnode == nullptr) {
            return;
        }
        ans.push_back(rootnode->val);
        early_traversal(rootnode->left, ans);
        early_traversal(rootnode->right,ans);
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        early_traversal(root,ans);
        return ans;
    }
};
迭代
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
                vector<int> ans;
        stack<TreeNode*> stk;
        TreeNode* tmp = root;
        if(root == nullptr) {
            return ans;
        };
        stk.push(root);
        while(!stk.empty()) {
            tmp = stk.top();
            ans.push_back(tmp->val);
            stk.pop();
            if(tmp->right != nullptr) {
                stk.push(tmp->right);
            }
            if(tmp->left != nullptr) {
                stk.push(tmp->left);
            }
        }
        return ans;
    }
};
前中后统一风格栈迭代法
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        stack<TreeNode*> st;
        if (root != NULL) st.push(root);
        while (!st.empty()) {
            TreeNode* node = st.top();
            if (node != NULL) {
                st.pop();
                if (node->right) st.push(node->right);  // 右
                if (node->left) st.push(node->left);    // 左
                st.push(node);                          // 中
                st.push(NULL);
            } else {
                st.pop();
                node = st.top();
                st.pop();
                result.push_back(node->val);
            }
        }
        return result;
    }
};